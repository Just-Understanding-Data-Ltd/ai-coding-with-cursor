"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import {
  ContentStrategyData,
  VideoData,
  ContentTheme,
  ContentFormat,
  ContentIdea,
  AutoGeneratedContent,
} from "../types";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import toast from "react-hot-toast";

import { StatsCards } from "./dashboard/stats-cards";
import { OverviewTab } from "./dashboard/overview-tab";
import { VideosTab } from "./dashboard/videos-tab";
import { ContentIdeasTab } from "./dashboard/content-ideas-tab";
import { AutoGenerateTab } from "./dashboard/auto-generate-tab";
import { ReportTab } from "./dashboard/report-tab";

interface DashboardViewProps {
  data: ContentStrategyData;
}

export function DashboardView({ data }: DashboardViewProps) {
  const [activeTab, setActiveTab] = useState("overview");
  const [selectedTheme, setSelectedTheme] = useState<ContentTheme | null>(null);
  const [selectedFormat, setSelectedFormat] = useState<ContentFormat | null>(
    null
  );
  const [autoGenerateIdea, setAutoGenerateIdea] = useState<ContentIdea | null>(
    null
  );

  // Format numbers for display
  const formatNumber = (num: number): string => {
    if (num >= 1000000) {
      return (num / 1000000).toFixed(1) + "M";
    } else if (num >= 1000) {
      return (num / 1000).toFixed(1) + "K";
    } else {
      return num.toString();
    }
  };

  // Format duration for display
  const formatDuration = (seconds: number): string => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds.toString().padStart(2, "0")}`;
  };

  // Calculate total engagement
  const totalEngagement = data.topVideos.reduce(
    (sum, video) => sum + video.engagement,
    0
  );
  const totalLikes = data.topVideos.reduce(
    (sum, video) => sum + video.likes,
    0
  );
  const totalShares = data.topVideos.reduce(
    (sum, video) => sum + video.shares,
    0
  );
  const totalComments = data.topVideos.reduce(
    (sum, video) => sum + video.comments,
    0
  );
  const totalViews = data.topVideos.reduce(
    (sum, video) => sum + video.views,
    0
  );

  // Prepare chart data
  const themePerformanceData = {
    labels: data.contentThemes.map((theme) => theme.name),
    datasets: [
      {
        label: "Performance Score",
        data: data.contentThemes.map((theme) => theme.performance),
        backgroundColor: [
          "rgba(99, 102, 241, 0.8)",
          "rgba(79, 70, 229, 0.8)",
          "rgba(67, 56, 202, 0.8)",
        ],
        borderColor: [
          "rgb(99, 102, 241)",
          "rgb(79, 70, 229)",
          "rgb(67, 56, 202)",
        ],
        borderWidth: 1,
      },
    ],
  };

  const formatPerformanceData = {
    labels: data.contentFormats.map((format) => format.name),
    datasets: [
      {
        label: "Performance Score",
        data: data.contentFormats.map((format) => format.performance),
        backgroundColor: [
          "rgba(16, 185, 129, 0.8)",
          "rgba(5, 150, 105, 0.8)",
          "rgba(4, 120, 87, 0.8)",
        ],
        borderColor: [
          "rgb(16, 185, 129)",
          "rgb(5, 150, 105)",
          "rgb(4, 120, 87)",
        ],
        borderWidth: 1,
      },
    ],
  };

  const engagementDistributionData = {
    labels: ["Likes", "Comments", "Shares"],
    datasets: [
      {
        label: "Engagement Distribution",
        data: [totalLikes, totalComments, totalShares],
        backgroundColor: [
          "rgba(239, 68, 68, 0.8)",
          "rgba(249, 115, 22, 0.8)",
          "rgba(245, 158, 11, 0.8)",
        ],
        borderColor: [
          "rgb(239, 68, 68)",
          "rgb(249, 115, 22)",
          "rgb(245, 158, 11)",
        ],
        borderWidth: 1,
      },
    ],
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.1,
      },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.5,
      },
    },
  };

  // Handle generating a script from a content idea
  const handleGenerateScript = (idea: ContentIdea) => {
    setAutoGenerateIdea(idea);
  };

  // Function to generate video content from an idea to be passed to both tabs
  const generateVideoFromIdea = (idea: ContentIdea) => {
    // Generate a unique ID using timestamp to avoid duplicates
    const uniqueId = `idea-${idea.id}-${Date.now()}`;

    const newContent: AutoGeneratedContent = {
      id: uniqueId,
      title: idea.title,
      description: idea.description,
      videoUrl: `https://example.com/auto-video-${uniqueId}`,
      thumbnailUrl: `https://picsum.photos/seed/${uniqueId}/300/200`,
      duration: Math.floor(Math.random() * 30) + 15,
      suggestedHashtags: idea.suggestedHashtags,
    };

    // Update auto-generated content state
    setAutoContent([newContent, ...autoContent]);

    // Show a toast notification
    toast.success(
      `Video "${idea.title}" has been generated! Check the Video Content tab to view your new video.`
    );
  };

  // State for managing auto-generated content
  const [autoContent, setAutoContent] = useState<AutoGeneratedContent[]>(
    data.autoGeneratedContent
  );

  return (
    <div className="space-y-8">
      {/* Hiding StatsCards section as requested */}
      {/* <StatsCards data={data} formatNumber={formatNumber} /> */}

      <Tabs
        value={activeTab}
        onValueChange={setActiveTab}
        className="space-y-4"
      >
        <TabsList className="grid grid-cols-4 md:w-[750px]">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="videos">Videos</TabsTrigger>
          <TabsTrigger value="content-ideas">Content Ideas</TabsTrigger>
          <TabsTrigger value="auto-generate">Video Content</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          <OverviewTab data={data} formatNumber={formatNumber} />
        </TabsContent>

        <TabsContent value="videos" className="space-y-6">
          <VideosTab
            data={data}
            formatNumber={formatNumber}
            formatDuration={formatDuration}
          />
        </TabsContent>

        <TabsContent value="content-ideas" className="space-y-6">
          <ContentIdeasTab
            data={data}
            onGenerateScript={handleGenerateScript}
            onGenerateVideo={generateVideoFromIdea}
          />
        </TabsContent>

        <TabsContent value="auto-generate" className="space-y-6">
          <AutoGenerateTab
            data={{
              ...data,
              autoGeneratedContent: autoContent,
            }}
            formatDuration={formatDuration}
            onGenerateNew={(newContent) =>
              setAutoContent([newContent, ...autoContent])
            }
          />
        </TabsContent>

        {/* Report tab hidden for now */}
        {/* <TabsContent value="report" className="space-y-6">
          <ReportTab data={data} formatNumber={formatNumber} />
        </TabsContent> */}
      </Tabs>
    </div>
  );
}
