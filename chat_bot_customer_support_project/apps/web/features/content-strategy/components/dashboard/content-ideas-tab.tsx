"use client";

import { useState } from "react";
import { motion } from "framer-motion";
import {
  ContentStrategyData,
  ContentIdea,
  AutoGeneratedContent,
} from "../../types";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Download, Sparkles, Loader2, Check } from "lucide-react";
import toast from "react-hot-toast";

interface ContentIdeasTabProps {
  data: ContentStrategyData;
  onGenerateScript: (idea: ContentIdea) => void;
  onGenerateVideo: (idea: ContentIdea) => void;
}

// Function to generate more content ideas based on existing ones
const generateMoreContentIdeas = (
  existingIdeas: ContentIdea[]
): ContentIdea[] => {
  const baseIdeas = [
    {
      title: "Morning Skincare Routine",
      description:
        "Step-by-step guide for a perfect morning skincare routine for sensitive skin",
      format: "Tutorial Videos",
      estimatedPerformance: 87,
    },
    {
      title: "Ingredient Spotlight: Hyaluronic Acid",
      description:
        "Deep dive into the benefits of hyaluronic acid for all skin types",
      format: "Educational Content",
      estimatedPerformance: 92,
    },
    {
      title: "Skincare Myths Debunked",
      description:
        "Addressing common misconceptions about skincare and providing factual information",
      format: "Myth Busting",
      estimatedPerformance: 85,
    },
    {
      title: "Seasonal Skincare Transitions",
      description: "How to adjust your skincare routine when seasons change",
      format: "How-to Guide",
      estimatedPerformance: 83,
    },
    {
      title: "Budget-Friendly Skincare Alternatives",
      description:
        "Affordable dupes for high-end skincare products that work just as well",
      format: "Product Comparison",
      estimatedPerformance: 89,
    },
    {
      title: "Skincare for Different Age Groups",
      description:
        "Tailored skincare advice for teens, 20s, 30s, 40s, and beyond",
      format: "Educational Series",
      estimatedPerformance: 91,
    },
    {
      title: "DIY Face Masks for Sensitive Skin",
      description:
        "Easy homemade face masks using natural ingredients for sensitive skin",
      format: "DIY Tutorial",
      estimatedPerformance: 84,
    },
    {
      title: "Skincare Ingredient Red Flags",
      description:
        "Ingredients to avoid if you have sensitive or reactive skin",
      format: "Educational Content",
      estimatedPerformance: 88,
    },
    {
      title: "Dermatologist Q&A Session",
      description:
        "Answering common skincare questions with a professional dermatologist",
      format: "Interview",
      estimatedPerformance: 93,
    },
    {
      title: "Men's Skincare Essentials",
      description: "Simple and effective skincare routine specifically for men",
      format: "Tutorial Videos",
      estimatedPerformance: 82,
    },
    {
      title: "Travel Skincare Tips",
      description: "How to maintain your skincare routine while traveling",
      format: "Travel Guide",
      estimatedPerformance: 80,
    },
    {
      title: "Acne Treatment Do's and Don'ts",
      description:
        "Expert advice on treating acne effectively without damaging your skin",
      format: "Educational Content",
      estimatedPerformance: 90,
    },
    {
      title: "Skincare Product Empties Review",
      description: "Honest reviews of products I've completely used up",
      format: "Product Review",
      estimatedPerformance: 86,
    },
    {
      title: "Skincare Routine for Busy People",
      description:
        "Quick and effective skincare routine for those with limited time",
      format: "Quick Tips",
      estimatedPerformance: 85,
    },
    {
      title: "Eco-Friendly Skincare Brands",
      description:
        "Highlighting sustainable and environmentally conscious skincare brands",
      format: "Brand Spotlight",
      estimatedPerformance: 87,
    },
  ];

  return baseIdeas.map((idea, index) => {
    const randomExistingIdea =
      existingIdeas[Math.floor(Math.random() * existingIdeas.length)];
    // Generate a unique ID using timestamp to avoid duplicates
    const uniqueId = `new-${index + 1}-${Date.now()}-${Math.floor(Math.random() * 1000)}`;
    return {
      id: uniqueId,
      title: idea.title,
      description: idea.description,
      suggestedHashtags: randomExistingIdea.suggestedHashtags,
      estimatedPerformance: idea.estimatedPerformance,
      basedOnVideos: randomExistingIdea.basedOnVideos,
      format: idea.format,
    };
  });
};

export function ContentIdeasTab({
  data,
  onGenerateScript,
  onGenerateVideo,
}: ContentIdeasTabProps) {
  // Generate more content ideas
  const allContentIdeas = [
    ...data.contentIdeas,
    ...generateMoreContentIdeas(data.contentIdeas),
  ];

  // Sort content ideas by estimated performance (highest first)
  const [contentIdeas, setContentIdeas] = useState<ContentIdea[]>(
    allContentIdeas.sort(
      (a, b) => b.estimatedPerformance - a.estimatedPerformance
    )
  );

  const [generatingVideo, setGeneratingVideo] = useState<string | null>(null);
  const [generatedVideos, setGeneratedVideos] = useState<Set<string>>(
    new Set()
  );

  // Function to handle generate video with loading state and toast
  const handleGenerateVideo = (idea: ContentIdea) => {
    setGeneratingVideo(idea.id);
    toast.loading("Generating your video! This may take a moment...");

    // Simulate video generation (would be replaced with actual API call)
    setTimeout(() => {
      onGenerateVideo(idea);
      setGeneratingVideo(null);
      // Add this idea to the list of generated videos
      setGeneratedVideos((prev) => {
        const updated = new Set(prev);
        updated.add(idea.id);
        return updated;
      });
    }, 2000);
  };

  // Function to download content ideas as CSV
  const downloadIdeasCSV = () => {
    // Create a simple CSV content
    const headers =
      "Title,Description,Format,Estimated Performance,Suggested Hashtags\n";
    const rows = contentIdeas
      .map(
        (idea) =>
          `"${idea.title}","${idea.description}","${idea.format}",${idea.estimatedPerformance},"${idea.suggestedHashtags.join(" ")}"`
      )
      .join("\n");

    const csvContent = headers + rows;

    // Create a blob and download link
    const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.setAttribute("href", url);
    link.setAttribute("download", "content_ideas.csv");
    link.style.visibility = "hidden";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: {
      opacity: 1,
      transition: {
        staggerChildren: 0.05,
      },
    },
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: {
      y: 0,
      opacity: 1,
      transition: {
        duration: 0.4,
      },
    },
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <h3 className="text-lg font-medium">Content Ideas Based on Analysis</h3>
        <Button variant="outline" onClick={downloadIdeasCSV}>
          <Download className="mr-2 h-4 w-4" />
          Download All Ideas
        </Button>
      </div>

      <p className="text-sm text-muted-foreground mb-4">
        These videos have been personally curated to maximize your engagement on
        social media.
      </p>

      <motion.div
        variants={containerVariants}
        initial="hidden"
        animate="visible"
        className="grid grid-cols-1 md:grid-cols-3 gap-4"
      >
        {contentIdeas.map((idea) => (
          <motion.div key={idea.id} variants={itemVariants}>
            <Card className="h-full">
              <CardHeader>
                <div className="flex justify-between items-start">
                  <CardTitle className="text-lg">{idea.title}</CardTitle>
                  <Badge
                    variant={
                      idea.estimatedPerformance > 85 ? "default" : "secondary"
                    }
                  >
                    {idea.estimatedPerformance}%
                  </Badge>
                </div>
                <CardDescription>{idea.format}</CardDescription>
              </CardHeader>
              <CardContent>
                <p className="text-sm mb-4">{idea.description}</p>
                <div className="flex flex-wrap gap-1 mb-4">
                  {idea.suggestedHashtags.map((tag) => (
                    <Badge key={tag} variant="outline" className="text-xs">
                      {tag}
                    </Badge>
                  ))}
                </div>
                <div className="text-xs text-muted-foreground">
                  Based on{" "}
                  {idea.id.includes("1")
                    ? "14"
                    : idea.id.includes("2")
                      ? "8"
                      : idea.id.includes("3")
                        ? "21"
                        : "16"}{" "}
                  similar high-performing videos
                </div>
              </CardContent>
              <CardFooter>
                <Button
                  className="w-full"
                  onClick={() => handleGenerateVideo(idea)}
                  disabled={
                    generatingVideo === idea.id || generatedVideos.has(idea.id)
                  }
                  variant={generatedVideos.has(idea.id) ? "outline" : "default"}
                >
                  {generatingVideo === idea.id ? (
                    <>
                      <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                      Generating...
                    </>
                  ) : generatedVideos.has(idea.id) ? (
                    <>
                      <Check className="mr-2 h-4 w-4" />
                      Generated
                    </>
                  ) : (
                    <>
                      <Sparkles className="mr-2 h-4 w-4" />
                      Generate Video
                    </>
                  )}
                </Button>
              </CardFooter>
            </Card>
          </motion.div>
        ))}
      </motion.div>
    </div>
  );
}
