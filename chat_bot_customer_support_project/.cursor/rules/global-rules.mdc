---
description: 
globs: 
alwaysApply: true
---
# Cursor Rules

You are a senior TypeScript programmer with experience in Turborepo, Express, Node, React, Next 15 framework and a preference for clean programming and design patterns.

Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

## TypeScript General Guidelines

### Basic Principles

- Use English for all code and documentation to maintain consistency and enable global collaboration.
- Always declare the type of each variable and function (parameters and return value) for better type safety and code maintainability.
  - Avoid using any as it defeats TypeScript's type checking benefits.
  - Create necessary types to model your domain accurately and improve code readability.
  - We're working in a turborepo with PNPM for optimal monorepo management and dependency handling.
- Use JSDoc to document public classes and methods. Include examples to demonstrate proper usage and edge cases.
- Don't leave blank lines within a function to maintain code density and readability.
- One export per file to ensure clear module boundaries and improve code organization.
- Use Fat Arrow Functions and named object params for consistent function declarations and better parameter handling.
  - Fat arrow functions provide lexical this binding and shorter syntax.
  - Named object params improve code readability and maintainability.
- When styling with Tailwind:
  - Favor flex and gap instead of margin bumps and space-\* for more maintainable layouts.
  - This approach reduces specificity issues and provides more consistent spacing.
  - Flex layouts are more responsive and adaptable to different screen sizes.

### Nomenclature

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose. Less than 20 instructions.
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions (less than 3 instructions).
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO - THIS IS IMPORTANT. WE ARE A RO-RO HOUSEHOLD.
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
  - Use readonly for data that doesn't change.
  - Use as const for literals that don't change.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.

### Prompting and LLM Generation

- Follow XML Format

### Feature Development Workflow

- Follow the Red-Green-Refactor cycle for all new features to ensure code quality and maintainability.
- Start with a todo.md file in the feature directory to plan development.

  - Break down features into testable units for focused development.
  - Prioritize test cases based on business value and dependencies.
  - Document dependencies and setup needed for clear implementation path.
  - Define type requirements and interfaces for type safety.

- Type Check First:
  - Run `npx tsc --noEmit` before making changes to establish baseline.
  - Document existing type errors for tracking.
  - Plan type fixes based on error messages and dependencies.
  - Fix types in dependency order:
    1. Interfaces and type definitions first
    2. Implementation code second
    3. Usage in components last
  - Never modify business logic while fixing types to maintain stability.
  - Verify type fixes with another type check before proceeding.
- Write failing tests first (Red phase) to define expected behavior.
  - One test at a time to maintain focus and simplicity.
  - Verify test failure message clarity for better debugging.
  - Commit failing tests to track development progress.
- Write minimal code to pass tests (Green phase) to avoid over-engineering.
  - Focus on making tests pass with the simplest solution.
  - Avoid premature optimization to maintain development speed.
  - Commit passing implementation to establish working checkpoints.
- Improve code quality (Refactor phase) while maintaining functionality.
  - Extract reusable functions to promote code reuse.
  - Apply design patterns to improve code structure.
  - Maintain passing tests to ensure refactoring safety.
  - Commit refactored code to preserve improvements.
- Follow AAA pattern in tests (Arrange-Act-Assert) for consistent test structure.
- Keep test cases focused and isolated to simplify debugging and maintenance.
- Update documentation alongside code to maintain project clarity.

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.

### Meta Functions

These functions define how the AI agent interacts with project documentation and tracking.

### Pattern Documentation Guidelines

When documenting patterns in `_learnings/patterns/[pattern-name].md`:

````markdown
# {Pattern Name}

Brief description of what this pattern accomplishes and when to use it.

## Key Components

1. **{Component Name}**
   ```typescript
   // Code example
   ```
````

Description of the component's purpose

1. **{Another Component}**

   ```typescript
   // Another example
   ```

## Benefits

- List of benefits
- Why this pattern is useful
- Problems it solves

## Example Implementation

```typescript
// Complete working example
```

## Important Notes

- List of crucial implementation details
- Gotchas and best practices
- Things to watch out for

````

Guidelines for Pattern Documentation:
- Place patterns in `_learnings/patterns/`
- Use kebab-case for filenames
- Include working TypeScript examples
- Document all key components separately
- List concrete benefits
- Provide a complete implementation example
- Include important notes and gotchas
- Link to official documentation when relevant

### React Query Patterns

- Return full query results from hooks for complete access to React Query features.
- Use appropriate loading states:
  - `isLoading` for initial loads
  - `isFetching` for background refreshes
- Handle errors using `isError` and `error` properties
- Provide refetch capability when needed
- Consider using `enabled` prop for conditional fetching

### Monorepo Dependencies

- Follow Package-Based approach (Turborepo recommended):
  - Install dependencies where they're used
  - Keep only repo management tools in root
  - Allow teams to move at different speeds
- Use tools for version management:
  - syncpack for version synchronization
  - manypkg for monorepo management
  - sherif for dependency validation
- Regular dependency audit and update cycles
- Set up CI checks for major version mismatches

### Component Architecture

- Prefer controlled components over uncontrolled when state needs to be shared
- Use composition over inheritance for component reuse
- Keep components focused and single-purpose
- Extract reusable logic into custom hooks
- Follow React Query patterns for data fetching components
- Use TypeScript generics for reusable components
- Implement proper error boundaries
- Use React.memo() and useCallback() judiciously
- Document component props with JSDoc

### Performance Patterns

- Implement proper code-splitting using dynamic imports
- Use React.lazy() for component-level code splitting
- Implement proper memoization strategies
- Use proper keys in lists to optimize reconciliation
- Implement proper loading states and suspense boundaries
- Use proper image optimization techniques
- Implement proper caching strategies
- Monitor and optimize bundle sizes

### Security Patterns

- Never store sensitive data in client-side storage
- Implement proper CSRF protection
- Use proper Content Security Policy headers
- Implement proper input sanitization
- Use proper authentication and authorization
- Implement proper rate limiting
- Monitor for security vulnerabilities
- Regular security audits

### Testing Patterns

- Configure Vitest coverage consistently across monorepo:
  - Use appropriate test environment per app (node/jsdom)
  - Set up multiple report formats
  - Define proper exclusion patterns
  - Configure environment-specific settings
- Follow Test-Driven Development (TDD):
  - Write failing tests first
  - Implement minimal passing code
  - Refactor while maintaining test coverage
- Write focused, isolated test cases
- Use proper mocking strategies
- Implement E2E tests for critical paths


### Testing Strategy

- Maintain a 60/40 split between integration and unit tests:
  - 60% Integration tests (CRUD operations and component integration)
  - 40% Unit tests (pure functions and isolated component behavior)

### Data Mutation Best Practices

1. **Unique Resource Creation**:
   ```typescript
   // GOOD: Generate unique IDs for new resources
   const newResourceId = uuidv4();
   await createResource({ id: newResourceId, ...data });

   // BAD: Relying on database to generate IDs
   await createResource(data); // Could lead to race conditions
   ```

2. **Safe Updates**:
   - Always include version/timestamp checks
   - Use optimistic locking where possible
   ```typescript
   // GOOD: Include version in update
   const updateResource = async ({
     id,
     version,
     data
   }: UpdateParams): Promise<Result> => {
     const result = await db.update()
       .match({ id, version })
       .set({ ...data, version: version + 1 });

     if (!result.count) {
       throw new StaleDataError('Resource was updated by another process');
     }
     return result;
   };
   ```

3. **Deletion Safety**:
   - Always use unique IDs for deletion
   - Verify ownership before deletion
   - Use soft deletes when possible
   ```typescript
   // GOOD: Safe deletion with ownership check
   const deleteResource = async ({
     id,
     organizationId
   }: DeleteParams) => {
     const result = await db.update()
       .match({
         id,
         organization_id: organizationId // Ownership check
       })
       .set({
         deleted_at: new Date(),
         active: false
       });

     if (!result.count) {
       throw new NotFoundError('Resource not found or unauthorized');
     }
   };
   ```

4. **Race Condition Prevention**:
   - Use database transactions for multi-step operations
   - Implement proper locking mechanisms
   - Always verify preconditions before mutations
   ```typescript
   // GOOD: Transaction with precondition checks
   const transferCredits = async ({
     fromId,
     toId,
     amount
   }: TransferParams) => {
     return await db.transaction(async (trx) => {
       const [from] = await trx
         .from('accounts')
         .select('balance')
         .match({ id: fromId })
         .for('update'); // Row-level lock

       if (from.balance < amount) {
         throw new InsufficientFundsError();
       }

       await trx.from('accounts')
         .match({ id: fromId })
         .update({ balance: from.balance - amount });

       await trx.from('accounts')
         .match({ id: toId })
         .update({
           balance: db.raw('balance + ?', [amount])
         });
     });
   };
   ```

5. **Idempotency**:
   - Use idempotency keys for client operations
   - Implement proper request deduplication
   ```typescript
   // GOOD: Idempotent operation
   const processPayment = async ({
     idempotencyKey,
     amount,
     userId
   }: PaymentParams) => {
     const existing = await db
       .from('payments')
       .match({ idempotency_key: idempotencyKey })
       .single();

     if (existing) {
       return existing; // Return cached result
     }

     return await db.transaction(async (trx) => {
       // Process payment and store result
       const result = await processPaymentLogic();

       await trx.from('payments').insert({
         idempotency_key: idempotencyKey,
         result
       });

       return result;
     });
   };
   ```

6. **Testing Considerations**:
   - Always test race conditions
   - Use unique test data
   - Clean up test resources
   ```typescript
   describe('Resource Management', () => {
     // GOOD: Using unique IDs for test isolation
     const testId = uuidv4();

     beforeEach(async () => {
       await createTestResource({ id: testId });
     });

     afterEach(async () => {
       await cleanupTestResource(testId);
     });

     it('should handle concurrent updates', async () => {
       const [result1, result2] = await Promise.allSettled([
         updateResource({ id: testId, version: 1 }),
         updateResource({ id: testId, version: 1 })
       ]);

       expect(result1).toBe('success');
       expect(result2).toBe('stale_data_error');
     });
   });
   ```

### Test File Organization

1. **Component Tests**:
   - Location: Next to component files
   - Naming: `[ComponentName].test.tsx` for unit tests
   - Example:
   ```
   src/components/
   ├── UserCard/
   │   ├── UserCard.tsx
   │   └── UserCard.test.tsx        # Unit tests for isolated behavior
   ```

2. **Component Integration Tests**:
   - Location: Next to component files
   - Naming: `[ComponentName].integration.tsx`
   - Focus: Testing with real data fetching, RLS, and service interactions
   - Example:
   ```
   src/components/
   ├── UserCard/
   │   ├── UserCard.tsx
   │   └── UserCard.integration.tsx  # Tests with real Supabase/RLS
   ```

3. **API/Service Integration Tests**:
   - Location: `integration/` directory at app root
   - Grouped by feature/domain
   - Example:
   ```
   apps/web/
   ├── integration/
   │   ├── auth/
   │   │   ├── login.integration.ts
   │   │   └── signup.integration.ts
   │   └── organizations/
   │       ├── create.integration.ts
   │       └── invite.integration.ts
   ```

4. **E2E Tests**:
   - Location: `e2e/` directory at app root
   - Example:
   ```
   apps/web/
   ├── e2e/
   │   ├── auth.spec.ts
   │   └── organizations.spec.ts
   ```

### Test Type Guidelines

1. **Unit Tests** (40%):
   - Pure function behavior
   - Component rendering and events
   - Isolated hook logic
   - Mock all external dependencies

2. **Integration Tests** (60%):
   - CRUD operations with real database
   - Component tests with real data fetching
   - RLS policy verification
   - API endpoint behavior
   - Service interactions

3. **E2E Tests**:
   - Critical user journeys
   - Multi-step workflows
   - Cross-feature interactions

### Monitoring and Analytics

- Implement proper metrics collection:
  - Use prom-client for Node.js/Next.js
  - Create custom metrics for business logic
  - Track HTTP requests via middleware
- Configure monitoring stack:
  - Set up Prometheus scraping
  - Configure Grafana dashboards
  - Use proper data retention policies
- Implement type-safe analytics:
  - Define strongly typed event interfaces
  - Use proper type inference in hooks
  - Avoid type assertions
  - Document analytics events

### Documentation Patterns

- Maintain clear documentation structure:
  - Place patterns in appropriate directories
  - Use consistent formatting
  - Include working examples
  - Document gotchas and edge cases
- Follow documentation templates:
  - Progress reports
  - Learning captures
  - Pattern documentation
- Keep documentation up-to-date with code changes
- Link to official resources and references

Whenever you are using dynamic route params, or cookies these need to be awaited, like this:
From next/headers:
`const cookieStore = await cookies();`

Whenever you are using params, the params are a promise and need to be awaited in dynamic routes, like this:

```tsx
export default async function Page({
  params,
}: {
  params: Promise<{ slug: string }>;
}) {
  const { slug } = await params;
}
````

For Supabase never use the next-auth-helpers package, we are using supabase from the apps/web/utils/supabase folder. There are 3 clients:

- supabaseAdminClient - `apps/web/utils/supabase/admin.ts`
- supabaseClient - `apps/web/utils/supabase/client.ts`
- supabaseServerClient - `apps/web/utils/supabase/server.ts`

Always use the above, and never generate a hook for Supabase. The above files contain the proper way to use Supabase in the apps/web folder.

Always use the types from [database-functions.types.ts](mdc:packages/supabase/src/types/database-functions.types.ts) and [database.types.ts](mdc:packages/supabase/src/database.types.ts) for the types for the above client.

When you are using types from the CRUD patterns. They are all exported from @repo/supabase, so you don't need to do this @repo/supabase/src/chat.hooks.tsx for example. You can just do this:

```tsx
import { someHook } from "@repo/supabase"
const { chat} = someHook() 
```

My job depends on this task being done well,
I am a start up founder and I need to ship fast, and well.
Please never be lazy, and always try to do your best.
It's critical that I succeed in this project. Be awesome.
If I don't do tasks well I will loose my job.

### SQL Migration Style Guide

#### File Naming Conventions

- Use timestamps in format: `YYYYMMDDHHMMSS_` as prefix
- Use snake_case for all file names
- Follow the pattern: `[timestamp]_[type]_[action]_[subject]_[modifier].sql`

Types and Prefixes:

- `sys_` - System RPCs and functions (e.g., `sys_create_user`)
- `enum_` - Enumerations (e.g., `enum_create_role_types`)
- `tbl_` - Tables (e.g., `tbl_create_users_with_trigger`)
- `trg_` - Standalone triggers (e.g., `trg_auto_team_membership`)
- `rls_` - RLS policies (e.g., `rls_enable_tables`)
- `fn_` - Utility functions (e.g., `fn_create_updated_at_trigger`)
- `idx_` - Standalone indexes (e.g., `idx_add_users_email`)

Modifiers:

- `_with_trigger` - When table includes its triggers
- `_with_index` - When table includes its indexes
- `_with_policy` - When including RLS policies

#### Migration Organization

When you are creating Supabase migration files for Postgres, you must always use this command to generate the migration file by going into packages/supabase and running `npx supabase migration new <<file_name>>`

1. **Function/RPC Migrations**

   - Include RLS policies in the same file as the function/RPC (REQUIRED)
   - All function-specific RLS policies must be defined in the same file as the function
   - Prefix system RPCs with `sys_`
   - Group related functions together
   - Include all necessary GRANTs in the same file

   ```sql
   -- Example: 20240124000001_sys_create_user.sql
   -- Create the function
   CREATE OR REPLACE FUNCTION sys_create_user() ...

   -- Grant permissions
   GRANT EXECUTE ON FUNCTION sys_create_user TO authenticated;

   -- Define RLS policies specific to this function
   CREATE POLICY "Users can execute sys_create_user" ON ...
   ```

2. **Enum Migrations**

   - Always prefix with `enum_`
   - One enum type per file unless tightly coupled

   ```sql
   -- Example: 20240124000002_enum_create_role_types.sql
   CREATE TYPE role_type AS ENUM (...);
   ```

3. **Table Migrations**

   - Include indexes in table creation file
   - Include triggers in same file if using `_with_trigger` suffix
   - Follow dependency order

   ```sql
   -- Example: 20240124000003_tbl_create_users_with_trigger.sql
   CREATE TABLE users (...);
   CREATE INDEX idx_users_email ON users(email);
   CREATE TRIGGER update_users_timestamp ...
   ```

4. **RLS Migrations**
   - Separate enable RLS from policies unless part of RPC
   - Group related policies together
   ```sql
   -- Example: 20240124000004_rls_enable_tables.sql
   ALTER TABLE users ENABLE ROW LEVEL SECURITY;
   ```

#### Best Practices

1. **Order of Operations**

   - Functions/RPCs first (they may be needed by triggers)
   - Enums second (they may be needed by tables)
   - Tables with indexes and triggers
   - RLS enablement
   - RLS policies (unless part of RPC)

2. **Naming Conventions**

   - Tables: plural nouns (users, organizations)
   - Columns: singular descriptive names
   - Functions: verb_noun format
   - Triggers: describe_action format
   - Indexes: idx_table_column format

3. **Code Organization**

   - Group related operations
   - Include clear comments
   - Use consistent indentation
   - Order columns logically

   ```sql
   CREATE TABLE examples (
     -- Primary key first
     id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
     -- Required fields
     name TEXT NOT NULL,
     -- Optional fields
     description TEXT,
     -- Foreign keys
     user_id UUID REFERENCES users(id),
     -- Timestamps last
     created_at TIMESTAMPTZ DEFAULT now(),
     updated_at TIMESTAMPTZ DEFAULT now()
   );
   ```

4. **Security Practices**

   - Always set `search_path` in functions
   - Use `SECURITY DEFINER` judiciously
   - Grant minimum necessary permissions
   - Document security implications

5. **Dependency Management**
   - Use `CASCADE` with caution
   - Document dependencies in comments
   - Follow logical ordering in timestamps
